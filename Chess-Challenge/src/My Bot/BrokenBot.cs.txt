using ChessChallenge.API;
using System;
using System.Collections.Generic;
using System.Linq;

public struct MoveEval {
    public Move _move;
    public int _eval;
}

public class MyBot : IChessBot
{
    int[] pieceValues = { 0, 90, 290, 310, 500, 910, 100000 };

    int MOVE_TIME_MS = 5000;
    // int CLEAR_TRANSPOSITION_TABLE_AFTER_PLY = 4;

    int positionalEvalMultiplier = 1;

    int gamePhase = 0;
    int nodes = 0;

    Move currentBestMove;
    int currentBestEval;
    MoveEval[] currentPV;
    int depthSearched;

    string pvToString() {
        string pvString = "";
        foreach (MoveEval moveEval in currentPV) {
            if (moveEval._move.ToString().Equals("Move: 'Null'")) break;
            pvString += moveEval._move.ToString() + " ";
        }
        return pvString;
    }

    public Move Think(Board board, Timer timer)
    {
        // Reset classparams for new search
        gamePhase = getGamePhase(board);
        nodes = 0;
        depthSearched = 0;

        MainSearch(board, timer);
        /*
        MainSearch should set:
        currentBestMove
        currentBestEval
        currentPV
        depthSearched
        */
        currentPV[0] = new MoveEval { _move = currentBestMove, _eval = currentBestEval };
        Console.WriteLine("eval \x1b[34m" + currentBestEval + "\x1b[0m Nodes \x1b[35m" + nodes + "\x1b[0m pv \x1b[33m" + pvToString() + "\x1b[0mdepth \x1b[32m" + depthSearched + "\x1b[0m");
        return currentBestMove;
    }

    void MainSearch(Board position, Timer timer) {
        // Iterative deepening search
        int mySide = position.IsWhiteToMove? 1 : -1;

        int bestEval = -1000000 * mySide;
        Move bestMoveFound = new();
        
        while (true) {

            // At each depth, clear pv
            currentPV = new MoveEval[depthSearched + 1];

            foreach (Move move in orderMoves(position)) {
                position.MakeMove(move);
                int moveEval = minimax(position, depthSearched, -1000000, 1000000, position.IsWhiteToMove);

                if (moveEval * mySide >= bestEval * mySide) {
                    bestEval = moveEval;
                    bestMoveFound = move;
                }
                position.UndoMove(move);
            }

            // Done with this depth, update the current best move and eval
            depthSearched++;
            currentBestMove = bestMoveFound;
            currentBestEval = bestEval;

            if (timer.MillisecondsElapsedThisTurn > MOVE_TIME_MS) return;

            // position.MakeMove(bestMoveFound);
        }
    }
    
    

    int staticEval(Board board) {
        nodes++;
        // Evaluate the board without looking ahead
        int eval = 0;

        //MATERIAL EVALUATION
        // Return +-1000000 if checkmate
        if (board.IsInCheckmate())
            return 1000000 * (board.IsWhiteToMove? -1 : 1);

        if (getGamePhase(board) >= 4) { // Endgame handling
            // In the endgame, both sides need to try and promote pawns
            // Its also important to keep the king active, so favor kings being in the center
            // Favor position for a side if they have a passed pawn

            // Pawn promotions & passer checking
            foreach (Piece P in board.GetAllPieceLists()[0].Concat(board.GetAllPieceLists()[6])) {
                // If a pawn is about to promote, 
                if (P.IsWhite && P.Square.Rank >= 5)
                    // Add 500 now, if the promotion square is under control add 400 more <- ADD LATER
                    eval += (150 * -(4-P.Square.Rank)) * positionalEvalMultiplier;
                else if (!P.IsWhite && P.Square.Rank <= 2)
                    eval -= (150 * (3-P.Square.Rank)) * positionalEvalMultiplier;
            }
        }

        // Get the material difference between the two sides
        // Positive if white is ahead, negative if black is ahead
        PieceList[] allPieceLists = board.GetAllPieceLists();
        int[] openFiles = new int[8];

        for (int i = 0; i < allPieceLists.Length; i++)  
            eval += (pieceValues[i % 6 + 1] * allPieceLists[i].Count) * (i < 6? 1 : -1);

        
        //PUSH CENTER PAWNS
        foreach(Piece P in allPieceLists[0].Concat(allPieceLists[6])){
            openFiles[P.Square.File] = 1;

            if(getGamePhase(board) < 4 && ((BitboardHelper.GetPawnAttacks(P.Square, P.IsWhite) & 0b0000000000000000000000000001100000011000000000000000000000000000) != 0))
                eval += 7 * (P.IsWhite? 1 : -1) * positionalEvalMultiplier;
        }

        //CHECK KNIGHT CONTROL OF CENTER
        foreach(Piece N in allPieceLists[1].Concat(allPieceLists[7]))
            if(getGamePhase(board) < 4 && (BitboardHelper.GetKnightAttacks(N.Square) & 0b0000000000000000000000000001100000011000000000000000000000000000) != 0)
                eval += 6 * (N.IsWhite? 1 : -1) * positionalEvalMultiplier;

        //CHECK BISHOP CONTROL OF CENTER
        foreach(Piece B in allPieceLists[2].Concat(allPieceLists[8]))
            if(getGamePhase(board) < 4 && (BitboardHelper.GetSliderAttacks(PieceType.Bishop, B.Square, board.AllPiecesBitboard) & 0b0000000000000000000000000001100000011000000000000000000000000000) != 0)
                eval += 5 * (B.IsWhite? 1 : -1) * positionalEvalMultiplier;

        //MOVE ROOKS TO OPEN FILES 
        foreach(Piece R in allPieceLists[3].Concat(allPieceLists[9])){
            if(openFiles[R.Square.File] == 0)
                eval += 4 * (R.IsWhite? 1 : -1) * positionalEvalMultiplier;

            //places rooks on the 7th/2nd in the endgame
            if(getGamePhase(board) >= 4 && (R.Square.Rank == 3.5 + 2.5 * (R.IsWhite? 1 : -1)))
                eval += 6 * (R.IsWhite? 1 : -1) * positionalEvalMultiplier;
        }
        

        return eval;
    }

    int getGamePhase(Board board) {
        /**
         * Returns:
         *
         * 0 if opening -           theory, development, memorized lines
         * 1 if early game -        development, piece activity, space
         * 2 if midgame -           attacking, defending, king safety
         * 3 if middle/late game -  maybe getting rooks out, attacking
         * 4 if endgame -           pawn play and piece coordination
         * 5 if late endgame -      promotion, king activity, checkmate
         *
         * Maximum starting material is 78 points in total
        **/
        int totalMaterial = -200000; // Kings shouldn't be counted
        PieceList[] allPieceLists = board.GetAllPieceLists();
        for (int i = 0; i < allPieceLists.Length; i++)
        {
            totalMaterial += pieceValues[i % 6 + 1] * allPieceLists[i].Count;
        }

        if (board.PlyCount <= 6) return 0;
        if (board.PlyCount <= 16) return 1;

        // Now based on material

        return 1 + (10000 - totalMaterial) / 2000;
    }

    List<Move> orderMoves(Board board){
        // Order moves by captures, promotions, checks, and then by least valuable victim
        // This will be used to order the moves in the minimax search
        List<Move> moves = Enumerable.ToList(board.GetLegalMoves());
        List<Move> interestingMoves = new();

        if (currentBestMove != null && moves.Contains(currentBestMove)) {
            interestingMoves.Add(currentBestMove);
        }

        interestingMoves.AddRange(moves.Where(m => {
            board.MakeMove(m);
            bool isCheck = board.IsInCheck();
            board.UndoMove(m);
            
            return isCheck;
        }));

        interestingMoves.AddRange(moves.Where(x => x.IsPromotion).ToList());
        int currentInterestingCount = interestingMoves.Count;

        foreach (Move move in moves.Where(x => x.IsCapture)) {
            int captureProfit = pieceValues[(int) move.CapturePieceType] - pieceValues[(int) move.MovePieceType];
            if (captureProfit > 0) interestingMoves.Insert(currentInterestingCount, move);
            else interestingMoves.Add(move);
        }

        // foreach (Move m in moves) {
        //     // Check if it is a threat move by getting the attacked bitboard and &ing with opponent's pieces bitboard
        //     if (moveIsThreat(board, m) && !interestingMoves.Contains(m))
        //         interestingMoves.Add(m);
        // }

        interestingMoves.AddRange(moves.Except(interestingMoves).ToList());

        return interestingMoves;
    }

    /*Boolean moveIsThreat(Board board, Move move) {
        // Check if the move is a threat move by getting the attacked bitboard and &ing with opponent's pieces bitboard

        board.MakeMove(move);
        List<Func<ulong>> pieceTypeToAttackFunction = new List<Func<ulong>> {
            () => BitboardHelper.GetPawnAttacks(move.TargetSquare, board.IsWhiteToMove),
            () => BitboardHelper.GetKnightAttacks(move.TargetSquare),
            () => BitboardHelper.GetSliderAttacks(PieceType.Bishop, move.TargetSquare, board.AllPiecesBitboard),
            () => BitboardHelper.GetSliderAttacks(PieceType.Rook, move.TargetSquare, board.AllPiecesBitboard),
            () => BitboardHelper.GetSliderAttacks(PieceType.Queen, move.TargetSquare, board.AllPiecesBitboard),
            () => BitboardHelper.GetKingAttacks(move.TargetSquare)
        };

        ulong attackedBitboard = pieceTypeToAttackFunction[(int)move.MovePieceType-1]();
        board.UndoMove(move);

        return board.IsWhiteToMove? (attackedBitboard & board.BlackPiecesBitboard) != 0 : (attackedBitboard & board.WhitePiecesBitboard) != 0;
    }*/

    int minimax(Board position, int depth, int alpha, int beta, bool white) {
        
        // try { 
        //     int evalAndDepthSearched = transpositionTable[position.ZobristKey]; 
        //     if (evalAndDepthSearched >> 24 >= depth)
        //         return evalAndDepthSearched % 0xFFFFFF;
        // } catch {} // It doesn't exist in the transposition table, so we need to evaluate it (move on)

        if (depth == 0) 
            return staticEval(position);

        List<Move> orderedMoves = orderMoves(position);
        
        if (orderedMoves.Count == 0) { // If there are no legal moves, return +-1000000 if checkmate, 0 if stalemate
            if (position.IsInCheckmate()) return 1000000 * (white? -1 : 1);
            else return 0; // Stalemate
        }

        int bestEval = white? -1000000 : 1000000;
        Move bestMoveFound = new();
        foreach (Move move in orderedMoves) {

            //discourage bad moves like Kf8 in the opening and middlegame
            int moveBonus = ((move.MovePieceType == PieceType.King && !move.IsCastles && gamePhase < 3)? -100 : 0) * positionalEvalMultiplier;
            if (move.IsPromotion) moveBonus += 300 * positionalEvalMultiplier;

            position.MakeMove(move);
            int eval = minimax(position, depth - 1, alpha, beta, !white);
            position.UndoMove(move);
            
            if (white) {
                if (eval > bestEval) {
                    bestEval = eval;
                    currentPV[depth] = new MoveEval { _move = move, _eval = eval };
                }

                bestEval += moveBonus;
                alpha = Math.Max(alpha, eval);
            } else {

                if (eval < bestEval) {
                    bestEval = eval;
                    currentPV[depth] = new MoveEval { _move = move, _eval = eval };
                }

                bestEval -= moveBonus;
                beta = Math.Min(beta, eval);
            }
            if (beta <= alpha)
                break;
        }

        // transpositionTable[position.ZobristKey] = bestEval + 2^24 * depth; // First 8 bits represent the depth
        return bestEval;
    }
}
